{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/GitHub/react-playlist-annotator/src/pages/WebApp/components/SpotifyGetPlaylists/SpotifyGetPlaylists.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from \"axios\";\nimport './SpotifyGetPlaylists.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PLAYLISTS_ENDPOINT = \"https://api.spotify.com/v1/me/playlists\";\nconst SpotifyGetPlaylists = () => {\n  _s();\n  const [token, setToken] = useState(\"\");\n  const [data, setData] = useState({});\n\n  // get token from local storage when we open webapp\n  // (i hope we dont need this on every separate component...)\n  useEffect(() => {\n    if (localStorage.getItem('accessToken')) {\n      setToken(localStorage.getItem('accessToken'));\n    }\n  }, []);\n  const handleGetPlaylists = () => {\n    axios.get(PLAYLISTS_ENDPOINT, {\n      headers: {\n        Authorization: \"Bearer\" + token\n      }\n    }).then(response => setData(response.data)).catch(error => {\n      console.log(error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGetPlaylists,\n      children: \"Get Playlists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(SpotifyGetPlaylists, \"Jt4HKrL1+N3K4Uvm2fmAKcJsSag=\");\n_c = SpotifyGetPlaylists;\nexport default SpotifyGetPlaylists;\nvar _c;\n$RefreshReg$(_c, \"SpotifyGetPlaylists\");","map":{"version":3,"names":["React","useEffect","useState","axios","PLAYLISTS_ENDPOINT","SpotifyGetPlaylists","token","setToken","data","setData","localStorage","getItem","handleGetPlaylists","get","headers","Authorization","then","response","catch","error","console","log"],"sources":["/Users/user/Documents/GitHub/react-playlist-annotator/src/pages/WebApp/components/SpotifyGetPlaylists/SpotifyGetPlaylists.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from \"axios\";\n\nimport './SpotifyGetPlaylists.css'\n\nconst PLAYLISTS_ENDPOINT = \"https://api.spotify.com/v1/me/playlists\"\n\nconst SpotifyGetPlaylists = () => {\n    const [token, setToken] = useState(\"\");\n    const [data, setData] = useState({});\n\n    // get token from local storage when we open webapp\n    // (i hope we dont need this on every separate component...)\n    useEffect(() => {\n        if (localStorage.getItem('accessToken')) {\n            setToken(localStorage.getItem('accessToken'))\n        }\n    }, []);\n\n    const handleGetPlaylists = () => {\n        axios.get(PLAYLISTS_ENDPOINT, {\n            headers: {\n                Authorization: \"Bearer\" + token,\n            },\n        }).then(response => setData(response.data)).catch((error) => {\n            console.log(error);\n        });\n    }\n\nreturn (\n    <div>\n        <button onClick={handleGetPlaylists}>Get Playlists</button>\n    </div>\n)\n}\n\nexport default SpotifyGetPlaylists;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,2BAA2B;AAAA;AAElC,MAAMC,kBAAkB,GAAG,yCAAyC;AAEpE,MAAMC,mBAAmB,GAAG,MAAM;EAAA;EAC9B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEpC;EACA;EACAD,SAAS,CAAC,MAAM;IACZ,IAAIS,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,EAAE;MACrCJ,QAAQ,CAACG,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC;IACjD;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,kBAAkB,GAAG,MAAM;IAC7BT,KAAK,CAACU,GAAG,CAACT,kBAAkB,EAAE;MAC1BU,OAAO,EAAE;QACLC,aAAa,EAAE,QAAQ,GAAGT;MAC9B;IACJ,CAAC,CAAC,CAACU,IAAI,CAACC,QAAQ,IAAIR,OAAO,CAACQ,QAAQ,CAACT,IAAI,CAAC,CAAC,CAACU,KAAK,CAAEC,KAAK,IAAK;MACzDC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACtB,CAAC,CAAC;EACN,CAAC;EAEL,oBACI;IAAA,uBACI;MAAQ,OAAO,EAAEP,kBAAmB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAuB;IAAA;IAAA;IAAA;EAAA,QACzD;AAEV,CAAC;AAAA,GA3BKP,mBAAmB;AAAA,KAAnBA,mBAAmB;AA6BzB,eAAeA,mBAAmB;AAAC;AAAA"},"metadata":{},"sourceType":"module"}