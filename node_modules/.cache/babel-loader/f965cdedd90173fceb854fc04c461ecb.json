{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/GitHub/react-playlist-annotator/src/pages/WebApp/WebApp.js\",\n  _s = $RefreshSig$();\n// TODO refactor spotify login button logic into separate component \nimport React, { useEffect } from 'react';\nimport SpotifyGetPlaylists from './components/SpotifyGetPlaylists';\nimport SpotifyGetPlaylist from './components/SpotifyGetPlaylists';\nimport './WebApp.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CLIENT_ID = \"131c63861a804b6c87cef68f5e0caf51\";\nconst SPOTIFY_AUTHORIZE_ENDPOINT = 'https://accounts.spotify.com/authorize';\nconst REDIRECT_URI_AFTER_LOGIN = \"http://localhost:3000/webapp\";\nconst SPACE_DELIMITER = \"%20\";\nconst SCOPES = ['user-read-currently-playing', 'user-read-playback-state', 'playlist-read-private'];\nconst SCOPES_URL_PARAM = SCOPES.join(SPACE_DELIMITER);\n_c = SCOPES_URL_PARAM;\nconst getReturnedParamsFromSpotifyAuth = hash => {\n  const stringAfterHashtag = hash.substring(1);\n  const paramsInurl = stringAfterHashtag.split('&');\n  // handy way to split up URLs into constituent params (but is it the best way in JS?)\n  const paramsSplitUp = paramsInurl.reduce((accumulator, currentValue) => {\n    const [key, value] = currentValue.split('=');\n    accumulator[key] = value;\n    return accumulator;\n  }, {});\n  return paramsSplitUp;\n};\nconst WebApp = () => {\n  _s();\n  useEffect(() => {\n    // what is window.location?   \n    if (window.location.hash) {\n      // destructuring syntax\n      const {\n        access_token,\n        expires_in,\n        token_type\n      } = getReturnedParamsFromSpotifyAuth(window.location.hash);\n\n      // store token in local storage (option to store in firebase, but why?)\n      localStorage.clear();\n      localStorage.setItem(\"accessToken\", access_token);\n      localStorage.setItem('tokenType', token_type);\n      localStorage.setItem('expiresIn', expires_in);\n    }\n  });\n  const handleLogin = () => {\n    window.location = `${SPOTIFY_AUTHORIZE_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI_AFTER_LOGIN}&scope=${SCOPES_URL_PARAM}&response_type=token&show_dialog=true`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Hi\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      children: \"Login to Spotify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SpotifyGetPlaylists, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n_s(WebApp, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c2 = WebApp;\nexport default WebApp;\nvar _c, _c2;\n$RefreshReg$(_c, \"SCOPES_URL_PARAM\");\n$RefreshReg$(_c2, \"WebApp\");","map":{"version":3,"names":["React","useEffect","SpotifyGetPlaylists","SpotifyGetPlaylist","CLIENT_ID","SPOTIFY_AUTHORIZE_ENDPOINT","REDIRECT_URI_AFTER_LOGIN","SPACE_DELIMITER","SCOPES","SCOPES_URL_PARAM","join","getReturnedParamsFromSpotifyAuth","hash","stringAfterHashtag","substring","paramsInurl","split","paramsSplitUp","reduce","accumulator","currentValue","key","value","WebApp","window","location","access_token","expires_in","token_type","localStorage","clear","setItem","handleLogin"],"sources":["/Users/user/Documents/GitHub/react-playlist-annotator/src/pages/WebApp/WebApp.js"],"sourcesContent":["// TODO refactor spotify login button logic into separate component \nimport React, { useEffect } from 'react';\nimport SpotifyGetPlaylists from './components/SpotifyGetPlaylists';\nimport SpotifyGetPlaylist from './components/SpotifyGetPlaylists';\n\nimport './WebApp.css';\n\nconst CLIENT_ID = \"131c63861a804b6c87cef68f5e0caf51\";\nconst SPOTIFY_AUTHORIZE_ENDPOINT = 'https://accounts.spotify.com/authorize';\nconst REDIRECT_URI_AFTER_LOGIN = \"http://localhost:3000/webapp\";\nconst SPACE_DELIMITER = \"%20\";\nconst SCOPES = ['user-read-currently-playing','user-read-playback-state','playlist-read-private'];\nconst SCOPES_URL_PARAM = SCOPES.join(SPACE_DELIMITER);\n\nconst getReturnedParamsFromSpotifyAuth = (hash) => {\n    const stringAfterHashtag = hash.substring(1);\n    const paramsInurl = stringAfterHashtag.split('&')\n    // handy way to split up URLs into constituent params (but is it the best way in JS?)\n    const paramsSplitUp = paramsInurl.reduce((accumulator, currentValue) => {\n        const [key, value] = currentValue.split('=');\n        accumulator[key] = value;\n        return accumulator;\n    }, {})\n    return paramsSplitUp;\n}\n\nconst WebApp = () => {\n    useEffect(() => {\n        // what is window.location?   \n        if (window.location.hash) {\n            // destructuring syntax\n            const {\n                access_token, \n                expires_in, \n                token_type\n            } = getReturnedParamsFromSpotifyAuth(window.location.hash);\n\n            // store token in local storage (option to store in firebase, but why?)\n            localStorage.clear();\n            localStorage.setItem(\"accessToken\", access_token);\n            localStorage.setItem('tokenType',token_type);\n            localStorage.setItem('expiresIn',expires_in);\n\n        }\n    })\n    const handleLogin = () => {\n        window.location = `${SPOTIFY_AUTHORIZE_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI_AFTER_LOGIN}&scope=${SCOPES_URL_PARAM}&response_type=token&show_dialog=true`\n    }\n    return (\n        <div className='container'>\n            <h1> Hi</h1>\n            <button onClick={handleLogin}>Login to Spotify</button>\n            <SpotifyGetPlaylists />\n\n        </div>\n    );\n};\n\nexport default WebApp;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,mBAAmB,MAAM,kCAAkC;AAClE,OAAOC,kBAAkB,MAAM,kCAAkC;AAEjE,OAAO,cAAc;AAAC;AAEtB,MAAMC,SAAS,GAAG,kCAAkC;AACpD,MAAMC,0BAA0B,GAAG,wCAAwC;AAC3E,MAAMC,wBAAwB,GAAG,8BAA8B;AAC/D,MAAMC,eAAe,GAAG,KAAK;AAC7B,MAAMC,MAAM,GAAG,CAAC,6BAA6B,EAAC,0BAA0B,EAAC,uBAAuB,CAAC;AACjG,MAAMC,gBAAgB,GAAGD,MAAM,CAACE,IAAI,CAACH,eAAe,CAAC;AAAC,KAAhDE,gBAAgB;AAEtB,MAAME,gCAAgC,GAAIC,IAAI,IAAK;EAC/C,MAAMC,kBAAkB,GAAGD,IAAI,CAACE,SAAS,CAAC,CAAC,CAAC;EAC5C,MAAMC,WAAW,GAAGF,kBAAkB,CAACG,KAAK,CAAC,GAAG,CAAC;EACjD;EACA,MAAMC,aAAa,GAAGF,WAAW,CAACG,MAAM,CAAC,CAACC,WAAW,EAAEC,YAAY,KAAK;IACpE,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAGF,YAAY,CAACJ,KAAK,CAAC,GAAG,CAAC;IAC5CG,WAAW,CAACE,GAAG,CAAC,GAAGC,KAAK;IACxB,OAAOH,WAAW;EACtB,CAAC,EAAE,CAAC,CAAC,CAAC;EACN,OAAOF,aAAa;AACxB,CAAC;AAED,MAAMM,MAAM,GAAG,MAAM;EAAA;EACjBtB,SAAS,CAAC,MAAM;IACZ;IACA,IAAIuB,MAAM,CAACC,QAAQ,CAACb,IAAI,EAAE;MACtB;MACA,MAAM;QACFc,YAAY;QACZC,UAAU;QACVC;MACJ,CAAC,GAAGjB,gCAAgC,CAACa,MAAM,CAACC,QAAQ,CAACb,IAAI,CAAC;;MAE1D;MACAiB,YAAY,CAACC,KAAK,EAAE;MACpBD,YAAY,CAACE,OAAO,CAAC,aAAa,EAAEL,YAAY,CAAC;MACjDG,YAAY,CAACE,OAAO,CAAC,WAAW,EAACH,UAAU,CAAC;MAC5CC,YAAY,CAACE,OAAO,CAAC,WAAW,EAACJ,UAAU,CAAC;IAEhD;EACJ,CAAC,CAAC;EACF,MAAMK,WAAW,GAAG,MAAM;IACtBR,MAAM,CAACC,QAAQ,GAAI,GAAEpB,0BAA2B,cAAaD,SAAU,iBAAgBE,wBAAyB,UAASG,gBAAiB,uCAAsC;EACpL,CAAC;EACD,oBACI;IAAK,SAAS,EAAC,WAAW;IAAA,wBACtB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAY,eACZ;MAAQ,OAAO,EAAEuB,WAAY;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAA0B,eACvD,QAAC,mBAAmB;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QAErB;AAEd,CAAC;AAAC,GA9BIT,MAAM;AAAA,MAANA,MAAM;AAgCZ,eAAeA,MAAM;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module"}